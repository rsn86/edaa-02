# -*- coding: utf-8 -*-
"""EDAA-Avaliacao02-Graficos.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1McLPYGmpAoJC6jl0lVhaQK3tzpc4UDWf

# Gerar gráficos utilizados no artigo

## Configuração do ambiente
"""

# Listar locales instalados
!locale -a

# Instalar o locale pt_BR
!/usr/share/locales/install-language-pack pt_BR
!dpkg-reconfigure locales

# Listar locales instalados
!locale -a

# Reinicar o processo do python para enxergar o locale pt_BR
import os
os.kill(os.getpid(), 9)
# A execução do notebook será interrompida
# Será necessário disparar nova executação a partir da célula abaixo (CTRL+F10)

# Ignorar alerta de itens depreciados
import warnings
warnings.simplefilter(action='ignore', category=FutureWarning)

# Definir o locale pt_BR
import locale
locale.setlocale(locale.LC_NUMERIC, 'pt_BR.ISO8859-1')

"""## Código

### Pacotes utilizados
"""

# pacotes utilizados
import pandas as pd                         # Utilizado para ler os CSVs dos resultados
import matplotlib.pyplot as plt             # Utilizado para ajustar as legendas dos gráficos

from collections.abc import Sequence        # Type hint nas funções que aceitam arranjos

"""### Definições"""

URL_CSV_RESULTADOS_PT1 = 'https://github.com/rsn86/edaa-02/raw/main/pt1/resultados/resultados-todos.csv'
URL_CSV_RESULTADOS_PT2 = 'https://github.com/rsn86/edaa-02/raw/main/pt2/resultados/resultados-todos.csv'

df_pt1 = pd.read_csv(
    URL_CSV_RESULTADOS_PT1,
    sep=';',
    usecols=['tamanho_arranjo', 'rodada', 'metodo', 'comparacoes', 'tempo', 'cenario']
)

df_pt2 = pd.read_csv(
    URL_CSV_RESULTADOS_PT2,
    sep=';',
    usecols=['tamanho_arranjo', 'rodada', 'metodo', 'comparacoes', 'tempo', 'cenario']
)

df = df_pt1.append(df_pt2, ignore_index=True)

def peparar_dados_grafico(df: pd.DataFrame, cenario: str) -> pd.DataFrame:
  return \
    df[df['cenario'] == cenario].\
      groupby(
        ['tamanho_arranjo', 'metodo']
      )[['tempo', 'comparacoes']].\
      describe(
        percentiles=[]
      ).\
      reset_index().\
      replace({
        ('metodo', ''): {'Arvore': 'Árvore'}
      })

df_pior_caso = peparar_dados_grafico(df, 'Pior Caso')

df_aleatorio = peparar_dados_grafico(df, 'Aleatório')

def gerar_grafico(df: pd.DataFrame, values: tuple, ylabel: str, filename: str, style: Sequence):
  df.\
    pivot(
      index=['tamanho_arranjo'],
      columns='metodo',
      values=values
    ).\
    plot(
      logy=True,
      xticks=range(100_000, 1_000_000+1, 100_000),
      xlabel='Tamanho do Arranjo',
      ylabel=ylabel,
      legend=False,
      style=style,
      lw=3.0
    )
  plt.legend(
    bbox_to_anchor=(0,1.02,1,0.2), loc="lower left", mode="expand", borderaxespad=0, ncol=3)
  plt.savefig(filename)

# Padrão de cores utilizado nas linhas dos gráficos
style={
    'Binária': 'g*-',     # Linha verde, sólida, com marcadores estrela
    'Lista': 'bD-',       # Linha azul, sólica, com marcadores diamante
    'Por saltos': 'ks-',  # Linha preta, sólica, com marcadores quadrado
    'Sequencial': 'yo-.', # Linha amarela, traço-pontilhada, com maradores círculo
    'Árvore': 'r|:'       # Linha vermelha, pontilhada, com marcadores barra
}

gerar_grafico(
  df_pior_caso,
  values=('comparacoes', 'mean'),
  ylabel='Média Comparações',
  filename='comparacoes-pior_caso.svg',
  style=style
)

gerar_grafico(
  df_aleatorio,
  values=('comparacoes', 'mean'),
  ylabel='Média Comparações',
  filename='comparacoes-aleatorio.svg',
  style=style
)

gerar_grafico(
  df_pior_caso,
  values=('tempo', 'mean'),
  ylabel='Média Tempo',
  filename='tempo-pior_caso.svg',
  style=style
)

gerar_grafico(
  df_aleatorio,
  values=('tempo', 'mean'),
  ylabel='Média Tempo',
  filename='tempo-aleatorio.svg',
  style=style
)